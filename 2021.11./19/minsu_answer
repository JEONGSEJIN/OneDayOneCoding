import sys

n = int(sys.stdin.readline())
lines = [0]
for i in range(n):
    temp = list(map(int, sys.stdin.readline().split()))
    lines.append(temp)

parent = [-1 for i in range(n + 1)]

def ccw(x1, y1, x2, y2, x3, y3):
    temp = (x2 - x1) * (y3 - y2) - (y2 - y1) * (x3 - x2)
    if temp < 0:
        return -1
    elif temp > 0:
        return 1
    else:
        return 0

def check_cross(x1, y1, x2, y2, x3, y3, x4, y4):
    check_AB_C = ccw(x1, y1, x2, y2, x3, y3)
    check_AB_D = ccw(x1, y1, x2, y2, x4, y4)
    check_CD_A = ccw(x3, y3, x4, y4, x1, y1)
    check_CD_B = ccw(x3, y3, x4, y4, x2, y2)
    if check_AB_C * check_AB_D == 0 and check_CD_A * check_CD_B == 0:
        if (
            min(x1, x2) <= max(x3, x4)
            and min(x3, x4) <= max(x1, x2)
            and min(y1, y2) <= max(y3, y4)
            and min(y3, y4) <= max(y1, y2)
        ):
            return 1

    elif check_AB_C * check_AB_D <= 0 and check_CD_A * check_CD_B <= 0:
        return 1

    else:
        return 0

def find(x):
    if parent[x] < 0:
        return x
    p = find(parent[x])
    parent[x] = p
    return p


def union(x, y):
    x = find(x)
    y = find(y)

    if x == y:
        return
    elif parent[x] < parent[y]:
        parent[x] += parent[y]
        parent[y] = x
    else:
        parent[y] += parent[x]
        parent[x] = y

for i in range(1, n):
    for k in range(i + 1, n + 1):
        if check_cross(
            lines[i][0],
            lines[i][1],
            lines[i][2],
            lines[i][3],
            lines[k][0],
            lines[k][1],
            lines[k][2],
            lines[k][3],
        ):
            union(i, k)

count = 0
max_size = 0

for p in parent[1:]:
    if p<0:
        count+=1
        max_size = max(max_size, abs(p))

print(count)
print(max_size)
        ) > who_is_bigger(a[1], a[3]):
            return 0
        else:
            return 1

    elif a[0] == a[2]:
        y_of_meet = a[0] * get_inclination(b) + get_y_intercept(b)
        if y_of_meet >= a[1] and y_of_meet <= a[3]:
            return 1
        else:
            return 0

    elif b[0] == b[2]:
        y_of_meet = b[0] * get_inclination(a) + get_y_intercept(a)
        if y_of_meet >= b[1] and y_of_meet <= b[3]:
            return 1
        else:
            return 0

    else:
        if get_inclination(a) == get_inclination(b):  # 두 선분의 기울기가 같을 때 --> 같은 x점에서의 y값 비교!
            y_of_a_line = b[0] * get_inclination(a) + get_y_intercept(a)
            if y_of_a_line == b[1]:
                if who_is_smaller(b[0], b[2]) > who_is_bigger(a[0], a[2]) or who_is_smaller(
                    a[0], a[2]
                ) > who_is_bigger(b[0], b[2]):
                    return 0
                else:
                    return 1
            else:
                return 0

        else:
            x_of_meet = (get_y_intercept(b) - get_y_intercept(a)) / (
                get_inclination(a) - get_inclination(b)
            )
            y_of_meet = x_of_meet * get_inclination(a) + get_y_intercept(a)

            if check_double_point(a, x_of_meet) and check_double_point(b, x_of_meet):
                return 1
            else:
                return 0


semi_groups = []
not_alone_index = []

for i in range(n - 1):
    for k in range(n - 1 - i):
        if is_it_group(lines[i], lines[k + i + 1]):
            temp = [i, k + i + 1]
            chance = 0
            for i in range(len(semi_groups)):
                if (temp[0] in semi_groups[i]) or (temp[1] in semi_groups[i]):
                    semi_groups[i].append(temp[0])
                    semi_groups[i].append(temp[1])
                    semi_groups[i] = list(set(semi_groups[i]))
                    not_alone_index.append(i)
                    not_alone_index.append(k + i + 1)
                    not_alone_index = list(set(not_alone_index))
                    chance = 1
                    break
            if chance == 0:
                semi_groups.append(temp)
                not_alone_index.append(i)
                not_alone_index.append(k + i + 1)
                not_alone_index = list(set(not_alone_index))
            else:
                pass
        else:
            pass

high = 0

for group in semi_groups:
    temp = len(group)
    if temp >= high:
        high = temp

alone_index = list(range(n))

for index in not_alone_index:
    alone_index.remove(index)

print(len(semi_groups) + len(alone_index))
print(high)
